#!/bin/python3
"""
Problem:

Given a square matrix, calculate the absolute difference between the sums of its diagonals.

For example, the square matrix (arr) is shown below:

                1 2 3
                4 5 6
                9 8 9  

Looking at the above, you can see that...

The left-to-right diagonal = 1 + 5 + 9 = 15. 
The right to left diagonal = 3 + 5 + 9 = 17 . 
Their absolute difference is |15-17| = 2


The aim is to complete the function 'diagonalDifference',
which returns an integer representing the absolute diagonal difference (when inputted the parameter arr)
"""


import math
import os
import random
import re
import sys

# Complete the diagonalDifference function below.
# Author: Mehdi Naderi Varandi
def diagonalDifference(arr): #Start of code submission
    columnAndRow=arr[0]

    leftDiag=0
    rightDiag=0

    leftPointer=0
    rightPointer=(len(arr[0])-1)

    for i in range(0,len(arr[0])):
      
        for j in range(0,len(arr[0])):
            if (j==leftPointer):
                leftDiag+=arr[i][j]

            if(j==rightPointer):
                rightDiag+=arr[i][j]

        leftPointer+=1
        rightPointer-=1

    return (abs(rightDiag-leftDiag))
    
    #End of code submission

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input())

    arr = []

    for _ in range(n):
        arr.append(list(map(int, input().rstrip().split())))

    result = diagonalDifference(arr)

    fptr.write(str(result) + '\n')

    fptr.close()
