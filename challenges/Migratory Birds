#!/bin/python3

import math
import os
import random
import re
import sys

"""
Problem: 

You have been asked to help study the population of birds migrating across the continent. 

Each type of bird you are interested in will be identified by an integer value. 
Each time a particular kind of bird is spotted, its id number will be added to your array of sightings. 
You would like to be able to find out which type of bird is most common given a list of sightings. 

Your task is to print the type number of that bird and if two or more types of birds are equally common, 
choose the type with the smallest ID number.

For example, assume your bird sightings are of types arr = [1,1,2,2,3]. 
There are two each of types 1 and 2, and one sighting of type 3. Pick the lower of the two types seen twice: type 1. 
"""


# Complete the migratoryBirds function below.
# Author: Mehdi Naderi Varandi

def migratoryBirds(arr):
    #There's only 5 types of birds expected according to specification/input format
    #So only easy thing needed is just to have 
    
    #Sets up the variables
    typeOne=0 #Each variable records the frequency of the type of bird that appeared
    typeTwo=0
    typeThree=0
    typeFour=0
    typeFive=0

    for i in arr: #Goes through each element, checking each frequency and incrementing the appropiate variable
        if (i==1):
            typeOne+=1
        elif (i==2):
            typeTwo+=1
        elif (i==3):
            typeThree+=1
        elif (i==4):
            typeFour+=1
        else:
            typeFive+=1

    answer=[] #Sets up empty list,
    answer.append(typeOne) #Adds all variables that were previously incremented into the array
    answer.append(typeTwo)
    answer.append(typeThree)
    answer.append(typeFour)
    answer.append(typeFive)

    loopCounter=0 #Counter that can track the bird the lattery array is checking values for

    for i in answer:
        loopCounter+=1
        
        if (i==(max(answer))): #Checks if the element is the max in the array
            #We start from left to right (e.g. typeOne, typeTwo, etc) as the rules of the specification...
            #...mention that if two birds are equal, then just return the smallest ID. Hence, by starting left-to-right...
            #...via typeOne to Five, we can ensure we don't have to check if any are equal (just find the first max value first)
            return (loopCounter) #Return answer



if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    arr_count = int(input().strip())

    arr = list(map(int, input().rstrip().split()))

    result = migratoryBirds(arr)

    fptr.write(str(result) + '\n')

    fptr.close()
